package carrinho;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

// Mock da classe Produto
package produto;

public class Produto {
    private String nome;
    private double preco;

    public Produto(String nome, double preco) {
        this.nome = nome;
        this.preco = preco;
    }

    public double getPreco() {
        return preco;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Produto produto = (Produto) obj;
        return Double.compare(produto.preco, preco) == 0 && nome.equals(produto.nome);
    }

    @Override
    public int hashCode() {
        return nome.hashCode();
    }
}

// Mock da exceção ProdutoNaoEncontradoException
package produto;

public class ProdutoNaoEncontradoException extends Exception {
    public ProdutoNaoEncontradoException() {
        super("Produto não encontrado no carrinho.");
    }
}

// Classe original Carrinho
package carrinho;

import produto.Produto;
import produto.ProdutoNaoEncontradoException;
import java.util.ArrayList;
import java.util.Iterator;

public class Carrinho {

    private ArrayList items;

    public Carrinho() {
        items = new ArrayList();
    }

    public double getValorTotal() {
        double valorTotal = 0.0;
        for (Iterator i = items.iterator(); i.hasNext();) {
            Produto item = (Produto) i.next();
            valorTotal += item.getPreco();
        }
        return valorTotal;
    }

    public void addItem(Produto item) {
        items.add(item);
    }

    public void removeItem(Produto item) throws ProdutoNaoEncontradoException {
        if (!items.remove(item)) {
            throw new ProdutoNaoEncontradoException();
        }
    }

    public int getQtdeItems() {
        return items.size();
    }

    public void esvazia() {
        items.clear();
    }
}

// Testes unitários
package carrinho;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import produto.Produto;
import produto.ProdutoNaoEncontradoException;

import static org.junit.jupiter.api.Assertions.*;

public class CarrinhoTest {

    private Carrinho carrinho;
    private Produto produto1;
    private Produto produto2;

    @BeforeEach
    public void setUp() {
        carrinho = new Carrinho();
        produto1 = new Produto("Produto 1", 10.0);
        produto2 = new Produto("Produto 2", 20.0);
    }

    @Test
    public void testCarrinhoInicialmenteVazio() {
        assertEquals(0, carrinho.getQtdeItems(), "Carrinho deve estar vazio inicialmente");
        assertEquals(0.0, carrinho.getValorTotal(), 0.0001, "Valor total deve ser 0");
    }

    @Test
    public void testAdicionarItem() {
        carrinho.addItem(produto1);
        assertEquals(1, carrinho.getQtdeItems(), "Carrinho deve ter 1 item");
        assertEquals(10.0, carrinho.getValorTotal(), 0.0001, "Valor total deve ser 10.0");
    }

    @Test
    public void testAdicionarMultiplosItens() {
        carrinho.addItem(produto1);
        carrinho.addItem(produto2);
        assertEquals(2, carrinho.getQtdeItems(), "Carrinho deve ter 2 itens");
        assertEquals(30.0, carrinho.getValorTotal(), 0.0001, "Valor total deve ser 30.0");
    }

    @Test
    public void testRemoverItemExistente() throws ProdutoNaoEncontradoException {
        carrinho.addItem(produto1);
        carrinho.removeItem(produto1);
        assertEquals(0, carrinho.getQtdeItems(), "Carrinho deve ficar vazio após remover");
    }

    @Test
    public void testRemoverItemInexistenteLancaExcecao() {
        assertThrows(ProdutoNaoEncontradoException.class, () -> carrinho.removeItem(produto1));
    }

    @Test
    public void testEsvaziarCarrinho() {
        carrinho.addItem(produto1);
        carrinho.addItem(produto2);
        carrinho.esvazia();
        assertEquals(0, carrinho.getQtdeItems(), "Carrinho deve ficar vazio");
        assertEquals(0.0, carrinho.getValorTotal(), 0.0001, "Valor total deve ser 0");
    }
}
